name: Release

on:
  workflow_dispatch:
  release:
    types: [created]

permissions: {}

jobs:
  build:
    if: github.repository == 'mihaimaruseac/hindent' # Don't do this in forks
    runs-on: ubuntu-latest
    # Keep these in sync with a subset of Cabal-based CI matrix. This way, we
    # are not building a new cache here, just reusing an existing one.
    env:
      os: ubuntu-latest
      ghc: 9.6.3
    outputs:
      hash_sdist: ${{ steps.hash_sdist.outputs.hash_sdist }}
      hash_execs: ${{ steps.hash_execs.outputs.hash_execs }}
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false

      - name: Setup Haskell Compiler (cabal)
        id: setup-haskell
        uses: haskell-actions/setup@33585e1a16afa5875e124b0ebc89dd0c2f872c21 # v2.7.3
        with:
          ghc-version: ${{ env.ghc }}

      - name: Cache dist-newstyle
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: dist-newstyle
          key: dist-newstyle-${{ env.os }}-${{ env.ghc }}-${{ hashFiles('**/*.cabal') }}-${{ hashFiles('internal/**','src/**','app/**','tests/**','benchmarks/**') }}
          restore-keys: |
            dist-newstyle-${{ env.os }}-${{ env.ghc }}-${{ hashFiles('**/*.cabal') }}-
            dist-newstyle-${{ env.os }}-${{ env.ghc }}-

      - name: Cache ~/.cabal/store
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: ${{ steps.setup-haskell.outputs.cabal-store }}
          key: cabal-store-${{ env.os }}-${{ env.ghc }}-${{ hashFiles('**/*.cabal') }}
          restore-keys: cabal-store-${{ env.os }}-${{ env.ghc }}-

      - name: Build executables
        run: cabal build all:exes

      - name: Generate source distribution
        run: cabal sdist --output .

      - name: Generate documentation
        run: cabal haddock --haddock-for-hackage --enable-doc --builddir=.

      - name: Generate subject for provenance of source distribution
        id: hash_sdist
        run: |
          set -euo pipefail
          echo "hash_sdist=$(sha256sum hindent-*.tar.gz | base64 -w0)" >> "${GITHUB_OUTPUT}"

      # Wehn uploading we pick a fixed name since we don't yet have access to
      # the version string in the tarball. This can be fixed with some
      # scripting if needed, but it works for our use cases as it is.
      # TODO(mihaimaruseac): Maybe fix to upload the path as needed
      - name: Upload sdist as an artifact for later jobs in workflow
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          path: hindent-*.tar.gz
          name: sdist.zip # When downloading it is a zip containing the sdist tarball
          if-no-files-found: error
          retention-days: 1

      - name: Copy all executables to root directory for ease of release
        run: mkdir .execs && cp $(cabal list-bin all:exes) .execs

      # TODO(mihaimaruseac): Strip executables

      - name: Generate subject for provenance of executables
        id: hash_execs
        run: |
          set -euo pipefail
          echo "hash_execs=$(sha256sum .execs/* | base64 -w0)" >> "${GITHUB_OUTPUT}"

      # When uploading executables we push them all to the same archive and
      # later the action that downloads it automatically unpacks it. So, in
      # effect this allows us to be transparent on what the executables we
      # generate.
      # However, on the CI run this will result in an artifact (short lived!)
      # that has all of the executables in it. If we want to upload each
      # executable by itself, maybe we can use automatic matrix generation[1]
      # for this.
      # [1]: https://frontside.com/blog/2022-12-12-dynamic-github-action-jobs/
      # TODO(mihaimaruseac): Maybe use automatic matrix generation here
      - name: Upload executables as an artifact for later jobs in workflow
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          path: .execs/
          name: executables.zip # When downloading it is a zip with all executables
          if-no-files-found: error
          retention-days: 1

  provenance-sdist:
    needs: [build]
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: "${{ needs.build.outputs.hash_sdist }}"
      upload-assets: true
      provenance-name: source-distribution.intoto.jsonl

  provenance-execs:
    needs: [build]
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: "${{ needs.build.outputs.hash_execs }}"
      upload-assets: true
      provenance-name: executables.intoto.jsonl

  release:
    needs: [build, provenance-sdist, provenance-execs]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write # to upload to release notes
    steps:
      - name: Download artifact
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
        with:
          name: executables.zip

      - name: Download artifact
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
        with:
          name: sdist.zip

      - name: Upload assets
        uses: softprops/action-gh-release@69320dbe05506a9a39fc8ae11030b214ec2d1f87 # v2.0.5
        with:
          files: ./*

      # TODO(mihaimaruseac): Upload haddock and build report to Hackage
      # Not doing this now because we don't want to store user/pass in GitHub
      # secrets and there is no OIDC way to upload.
